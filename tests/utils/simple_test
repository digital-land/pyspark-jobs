#!/usr/bin/env python3
"""
Simple test script to verify the basic setup without complex dependencies.
"""
import os
import sys

# Add src to path - go up from tests/utils/ to project root
project_root = os.path.dirname(os.path.dirname(os.path.dirname(__file__)))
sys.path.insert(0, os.path.join(project_root, 'src'))

def test_basic_imports():
    """Test basic imports work."""
    print("Testing basic imports...")
    
    try:
        from jobs.utils.logger_config import setup_logging, get_logger
        print("‚úÖ Logger config import successful")
    except ImportError as e:
        print(f"‚ùå Logger config import failed: {e}")
        return False
    
    try:
        from jobs.main_collection_data import create_spark_session, load_metadata
        print("‚úÖ Main collection data import successful")
    except ImportError as e:
        print(f"‚ùå Main collection data import failed: {e}")
        return False
    
    return True

def test_logger_functionality():
    """Test logger functionality."""
    print("Testing logger functionality...")
    
    try:
        from jobs.utils.logger_config import setup_logging, get_logger
        
        setup_logging(log_level="INFO", environment="test")
        logger = get_logger(__name__)
        logger.info("Test log message")
        print("‚úÖ Logger functionality works")
        return True
    except Exception as e:
        print(f"‚ùå Logger functionality failed: {e}")
        return False

def test_configuration_loading():
    """Test configuration loading."""
    print("Testing configuration loading...")
    
    try:
        import json
        import tempfile
        from jobs.main_collection_data import load_metadata
        
        # Create test config
        test_config = {"test_key": "test_value"}
        
        with tempfile.NamedTemporaryFile(mode='w', suffix='.json', delete=False) as f:
            json.dump(test_config, f)
            config_path = f.name
        
        # Test loading
        result = load_metadata(config_path)
        
        # Cleanup
        os.unlink(config_path)
        
        if result == test_config:
            print("‚úÖ Configuration loading works")
            return True
        else:
            print(f"‚ùå Configuration loading failed: expected {test_config}, got {result}")
            return False
    except Exception as e:
        print(f"‚ùå Configuration loading failed: {e}")
        return False

def main():
    """Run all tests."""
    print("üß™ Running simple setup verification tests...\n")
    
    tests = [
        test_basic_imports,
        test_logger_functionality,
        test_configuration_loading
    ]
    
    passed = 0
    failed = 0
    
    for test in tests:
        try:
            if test():
                passed += 1
            else:
                failed += 1
        except Exception as e:
            print(f"‚ùå Test {test.__name__} failed with exception: {e}")
            failed += 1
        print()  # Empty line for readability
    
    print(f"üìä Test Results: {passed} passed, {failed} failed")
    
    if failed == 0:
        print("üéâ All tests passed! Your setup is working correctly.")
        return True
    else:
        print("üí• Some tests failed. Please check your setup.")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
